<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[程序员的多肉花园]]></title>
  <subtitle><![CDATA[hello world, hello 多肉]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://elevensky.github.io/"/>
  <updated>2015-02-15T03:50:29.448Z</updated>
  <id>http://elevensky.github.io/</id>
  
  <author>
    <name><![CDATA[elevensky]]></name>
    <email><![CDATA[346800989@qq.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Gulp: 任务自动管理工具]]></title>
    <link href="http://elevensky.github.io/2015/02/14/Gulp-%E4%BB%BB%E5%8A%A1%E8%87%AA%E5%8A%A8%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    <id>http://elevensky.github.io/2015/02/14/Gulp-任务自动管理工具/</id>
    <published>2015-02-14T14:22:19.000Z</published>
    <updated>2015-02-15T03:07:34.000Z</updated>
    <content type="html"><![CDATA[<h2 id="gulp介绍">gulp介绍</h2>
<p>Gulp与Grunt一样，也是一个自动任务运行器。它充分借鉴了Unix操作系统的管道（pipe）思想，很多人认为，在操作上，它要比Grunt简单。</p>
<p>Gulp是基于Node.js构建的，因此Gulp源文件和你用来定义任务的Gulp文件都被写进了JavaScript（或者CoffeeScript）里。前端开发工程师还可以用自己熟悉的语言来编写任务去lint JavaScript和CSS、解析模板以及在文件变动时编译LESS文件（当然这些只是一小部分例子）。</p>
<p>Gulp本身虽然不能完成很多任务，但它有大量插件可用，开发者可以访问插件页面或者在npm搜索gulpplugin就能看到。例如，有些插件可以用来执行<a href="https://www.npmjs.org/package/gulp-jshint/" target="_blank" rel="external">JSHint</a>、<a href="https://www.npmjs.org/package/gulp-coffee/" target="_blank" rel="external">编译CoffeeScript</a>，<a href="http://npmjs.org/package/gulp-mocha" target="_blank" rel="external">执行Mocha</a>测试，甚至更新版本号。</p>
<p>对比其他构建工具，比如<a href="http://gruntjs.com/" target="_blank" rel="external">Grunt</a>，以及最近流行的Broccoli，我相信Gulp会更胜一筹（请看后面的”Why Gulp?”部分），同时我汇总了一个使用Javascript编写的构建工具清单，可供大家参考。</p>
<p>Gulp是一个可以<a href="https://github.com/gulpjs/gulp/" target="_blank" rel="external">在GitHub上</a>找到的开源项目。</p>
<h2 id="安装">安装</h2>
<p>Gulp需要全局安装，然后再在项目的开发目录中安装为本地模块。先进入项目目录，运行下面的命令。</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">npm install -g gulp</div><div class="line"></div><div class="line">npm install --save-dev gulp</div></pre></td></tr></table></figure>

<h2 id="gulpfile-js">gulpfile.js</h2>
<p>项目根目录中的gulpfile.js，是Gulp的配置文件。它大概是下面的样子。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">});</div></pre></td></tr></table></figure>

<p>下面就是一个典型的gulpfile.js文件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">   uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'minify'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">   gulp.src(<span class="string">'js/app.js'</span>)</div><div class="line">      .pipe(uglify())</div><div class="line">      .pipe(gulp.dest(<span class="string">'build'</span>))</div><div class="line">});</div></pre></td></tr></table></figure>

<p>上面代码中使用了gulp-uglify模块。在此之前，需要先安装这个模块。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">npm install --save-dev gulp-uglify</div></pre></td></tr></table></figure>

<p>gulpfile.js加载gulp和gulp-uglify模块之后，使用gulp模块的task方法指定任务。task方法有两个参数，第一个是任务名，第二个是任务函数。在任务函数中，使用gulp模块的src方法，指定所要处理的文件，然后使用pipe方法，将上一步的输出转为当前的输入，进行链式处理。</p>
<p>在上面代码中，使用两次pipe方法，也就是说做了两种处理。第一种处理是使用gulp-uglify模块，压缩源码；第二种处理是使用gulp模块的dest方法，将上一步的输出写入本地文件，这里是build.js（代码中省略了后缀名js）。<br><img src="http://p1.qhimg.com/t01759cebd478ca1a35.png" alt="img"><br>从上面的例子中可以看到，gulp充分使用了“管道”思想，就是一个数据流（stream）：src方法读入文件产生数据流，dest方法将数据流写入文件，中间是一些中间步骤，每一步都对数据流进行一些处理。</p>
<p>下面是另一个数据流的例子。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">gulp.task(<span class="string">'js'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">   <span class="keyword">return</span> gulp.src(<span class="string">'js/*.js'</span>)</div><div class="line">      .pipe(jshint())</div><div class="line">      .pipe(uglify())</div><div class="line">      .pipe(concat(<span class="string">'app.js'</span>))</div><div class="line">      .pipe(gulp.dest(<span class="string">'build'</span>));</div><div class="line">});</div></pre></td></tr></table></figure>

<p>上面代码使用pipe命令，分别进行jshint、uglify、concat三步处理。</p>
<h2 id="gulp-src()">gulp.src()</h2>
<p>gulp模块的src方法，用于产生数据流。它的参数表示所要处理的文件，一般有以下几种形式。</p>
<ul>
<li>js/app.js：指定确切的文件名。</li>
<li>js/*.js：某个目录所有后缀名为js的文件。</li>
<li>js/**/*.js：某个目录及其所有子目录中的所有后缀名为js的文件。</li>
<li>!js/app.js：除了js/app.js以外的所有文件。</li>
<li>*.+(js|css)：匹配项目根目录下，所有后缀名为js或css的文件。</li>
</ul>
<p>src方法的参数还可以是一个数组，用来指定多个成员。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">gulp.src([<span class="string">'js/**/*.js'</span>, <span class="string">'!js/**/*.min.js'</span>])</div></pre></td></tr></table></figure>

<h2 id="gulp-task()">gulp.task()</h2>
<p>gulp模块的task方法，用于定义具体的任务。它的第一个参数是任务名，第二个参数是任务函数。下面是一个非常简单的任务函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">gulp.task(<span class="string">'greet'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">'Hello world!'</span>);</div><div class="line">});</div></pre></td></tr></table></figure>

<p>task方法还可以指定按顺序运行的一组任务。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">gulp.task(<span class="string">'build'</span>, [<span class="string">'css'</span>, <span class="string">'js'</span>, <span class="string">'imgs'</span>]);</div></pre></td></tr></table></figure>

<p>上面代码先指定build任务，它按次序由css、js、imgs三个任务所组成。注意，由于每个任务都是异步调用，所以没有办法保证js任务的开始运行的时间，正是css任务运行结束。</p>
<p>如果希望各个任务严格按次序运行，可以把前一个任务写成后一个任务的依赖模块。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">gulp.task(<span class="string">'css'</span>, [<span class="string">'greet'</span>], <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">   <span class="comment">// Deal with CSS here</span></div><div class="line">});</div></pre></td></tr></table></figure>

<p>上面代码表明，css任务依赖greet任务，所以css一定会在greet运行完成后再运行。</p>
<p>如果一个任务的名字为default，就表明它是“默认任务”，在命令行直接输入gulp命令，就会运行该任务。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">   <span class="comment">// Your default task</span></div><div class="line">});</div></pre></td></tr></table></figure>

<h2 id="gulp-watch()">gulp.watch()</h2>
<p>gulp模块的watch方法，用于指定需要监视的文件。一旦这些文件发生变动，就运行指定任务。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">   gulp.watch(<span class="string">'templates/*.tmpl.html'</span>, [<span class="string">'build'</span>]);</div><div class="line">});</div></pre></td></tr></table></figure>

<p>上面代码指定，一旦templates目录中的模板文件发生变化，就运行build任务。</p>
<p>watch方法也可以用回调函数，代替指定的任务。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">gulp.watch(<span class="string">'templates/*.tmpl.html'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(event)</span> </span>{</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">'Event type: '</span> + event.type);</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">'Event path: '</span> + event.path);</div><div class="line">});</div></pre></td></tr></table></figure>

<p>另一种写法是watch方法所监控的文件发生变化时（修改、增加、删除文件），会触发change事件。可以对change事件指定回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> watcher = gulp.watch(<span class="string">'templates/*.tmpl.html'</span>, [<span class="string">'build'</span>]);</div><div class="line"></div><div class="line">watcher.on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(event)</span> </span>{</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">'Event type: '</span> + event.type);</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">'Event path: '</span> + event.path);</div><div class="line">});</div></pre></td></tr></table></figure>

<p>除了change事件，watch方法还可能触发以下事件。</p>
<ul>
<li>end：回调函数运行完毕时触发。</li>
<li>error：发生错误时触发。</li>
<li>ready：当开始监听文件时触发。</li>
<li>nomatch：没有匹配的监听文件时触发。</li>
</ul>
<p>watcher对象还包含其他一些方法。</p>
<ul>
<li>watcher.end()：停止watcher对象，不会再调用任务或回调函数。</li>
<li>watcher.files()：返回watcher对象监视的文件。</li>
<li>watcher.add(glob)：增加所要监视的文件，它还可以附件第二个参数，表示回调函数。</li>
<li>watcher.remove(filepath)：从watcher对象中移走一个监视的文件。</li>
</ul>
<h2 id="gulp-load-plugins模块">gulp-load-plugins模块</h2>
<p>一般情况下，gulpfile.js中的模块需要一个个加载。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    jshint = <span class="built_in">require</span>(<span class="string">'gulp-jshint'</span>),</div><div class="line">    uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>),</div><div class="line">    concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'js'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">   <span class="keyword">return</span> gulp.src(<span class="string">'js/*.js'</span>)</div><div class="line">      .pipe(jshint())</div><div class="line">      .pipe(jshint.reporter(<span class="string">'default'</span>))</div><div class="line">      .pipe(uglify())</div><div class="line">      .pipe(concat(<span class="string">'app.js'</span>))</div><div class="line">      .pipe(gulp.dest(<span class="string">'build'</span>));</div><div class="line">});</div></pre></td></tr></table></figure>

<p>上面代码中，除了gulp模块以外，还加载另外三个模块。</p>
<p>这种一一加载的写法，比较麻烦。使用gulp-load-plugins模块，可以加载package.json文件中所有的gulp模块。上面的代码用gulp-load-plugins模块改写，就是下面这样。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    gulpLoadPlugins = <span class="built_in">require</span>(<span class="string">'gulp-load-plugins'</span>),</div><div class="line">    plugins = gulpLoadPlugins();</div><div class="line"></div><div class="line">gulp.task(<span class="string">'js'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">   <span class="keyword">return</span> gulp.src(<span class="string">'js/*.js'</span>)</div><div class="line">      .pipe(plugins.jshint())</div><div class="line">      .pipe(plugins.jshint.reporter(<span class="string">'default'</span>))</div><div class="line">      .pipe(plugins.uglify())</div><div class="line">      .pipe(plugins.concat(<span class="string">'app.js'</span>))</div><div class="line">      .pipe(gulp.dest(<span class="string">'build'</span>));</div><div class="line">});</div></pre></td></tr></table></figure>

<p>上面代码假设package.json文件包含以下内容。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">{</div><div class="line">   <span class="string">"devDependencies"</span>: {</div><div class="line">      <span class="string">"gulp-concat"</span>: <span class="string">"~2.2.0"</span>,</div><div class="line">      <span class="string">"gulp-uglify"</span>: <span class="string">"~0.2.1"</span>,</div><div class="line">      <span class="string">"gulp-jshint"</span>: <span class="string">"~1.5.1"</span>,</div><div class="line">      <span class="string">"gulp"</span>: <span class="string">"~3.5.6"</span></div><div class="line">   }</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="gulp-livereload模块">gulp-livereload模块</h2>
<p>gulp-livereload模块用于自动刷新浏览器，反映出源码的最新变化。它除了模块以外，还需要在浏览器中安装插件，用来配合源码变化。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>),</div><div class="line">    livereload = <span class="built_in">require</span>(<span class="string">'gulp-livereload'</span>),</div><div class="line">    watch = <span class="built_in">require</span>(<span class="string">'gulp-watch'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'less'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">   gulp.src(<span class="string">'less/*.less'</span>)</div><div class="line">      .pipe(watch())</div><div class="line">      .pipe(less())</div><div class="line">      .pipe(gulp.dest(<span class="string">'css'</span>))</div><div class="line">      .pipe(livereload());</div><div class="line">});</div></pre></td></tr></table></figure>

<p>上面代码监视less文件，一旦编译完成，就自动刷新浏览器。</p>
<h2 id="参考链接">参考链接</h2>
<ul>
<li><p>Callum Macrae, <a href="http://www.smashingmagazine.com/2014/06/11/building-with-gulp/" target="_blank" rel="external">Building With Gulp</a></p>
</li>
<li><p>w3ctech <a href="http://www.w3ctech.com/topic/134" target="_blank" rel="external">Gulp开发教程</a></p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="gulp介绍">gulp介绍</h2>
<p>Gulp与Grunt一样，也是一个自动任务运行器。它充分借鉴了Unix操作系统的管道（pipe）思想，很多人认为，在操作上，它要比Grunt简单。</p>
<p>Gulp是基于Node.js构建的，因此Gulp源文件和你用来定义任务的Gulp文件都被写进了JavaScript（或者CoffeeScript）里。前端开发工程师还可以用自己熟悉的语言来编写任务去lint JavaScript和CSS、解析模板以及在文件变动时编译LESS文件（当然这些只是一小部分例子）。</p>
<p>Gulp本身虽然不能完成很多任务，但它有大量插件可用，开发者可以访问插件页面或者在npm搜索gulpplugin就能看到。例如，有些插件可以用来执行<a href="https://www.npmjs.org/package/gulp-jshint/" target="_blank" rel="external">JSHint</a>、<a href="https://www.npmjs.org/package/gulp-coffee/" target="_blank" rel="external">编译CoffeeScript</a>，<a href="http://npmjs.org/package/gulp-mocha" target="_blank" rel="external">执行Mocha</a>测试，甚至更新版本号。</p>
<p>对比其他构建工具，比如<a href="http://gruntjs.com/" target="_blank" rel="external">Grunt</a>，以及最近流行的Broccoli，我相信Gulp会更胜一筹（请看后面的”Why Gulp?”部分），同时我汇总了一个使用Javascript编写的构建工具清单，可供大家参考。</p>
<p>Gulp是一个可以<a href="https://github.com/gulpjs/gulp/" target="_blank" rel="external">在GitHub上</a>找到的开源项目。</p>
<h2 id="安装">安装</h2>
<p>Gulp需要全局安装，然后再在项目的开发目录中安装为本地模块。先进入项目目录，运行下面的命令。</p>
]]>
    
    </summary>
    
      <category term="gulp" scheme="http://elevensky.github.io/tags/gulp/"/>
    
      <category term="前端" scheme="http://elevensky.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[临沂苍山多肉大棚游]]></title>
    <link href="http://elevensky.github.io/2015/02/13/%E4%B8%B4%E6%B2%82%E8%8B%8D%E5%B1%B1%E5%A4%9A%E8%82%89%E5%A4%A7%E6%A3%9A%E6%B8%B8/"/>
    <id>http://elevensky.github.io/2015/02/13/临沂苍山多肉大棚游/</id>
    <published>2015-02-13T05:01:16.000Z</published>
    <updated>2015-02-13T06:02:03.000Z</updated>
    <content type="html"><![CDATA[<p>其实自从见到多肉以后，真的是非常非常喜欢的。<br>作为一个曾经混迹在一线城市的半吊子程序员，工作之外的生活就是程序员之间的搞基，单调乏味的个一逼。<br>作为一个连自己都养不好的人，养狗养猫咱们是一点个闲情雅致也没有。但是养点个植物还是很好的，至少你不用给动物一样天天他妈的伺候。<br>昨天去了我们大美临沂的多肉基地-苍山（兰陵）大柳树多肉大棚。<br>兰陵县月庄大柳树西200米。（大柳树是个标志，路口旁的一刻大柳树）<br>临沂多肉大棚详细路径：走206国道到兰陵汽车站，在汽车站前方第二个红绿灯处右拐，大约五公里，到北城医院就能看见大柳树，从大柳树处左拐进去大约半公里左侧<br>下面上图：</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>其实自从见到多肉以后，真的是非常非常喜欢的。<br>作为一个曾经混迹在一线城市的半吊子程序员，工作之外的生活就是程序员之间的搞基，单调乏味的个一逼。<br>作为一个连自己都养不好的人，养狗养猫咱们是一点个闲情雅致也没有。但是养点个植物还是很好的，至少你不用给动物一样天天他妈]]>
    </summary>
    
      <category term="多肉" scheme="http://elevensky.github.io/categories/%E5%A4%9A%E8%82%89/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2014年技术战略]]></title>
    <link href="http://elevensky.github.io/2015/02/11/%E6%88%91%E7%9A%842014/"/>
    <id>http://elevensky.github.io/2015/02/11/我的2014/</id>
    <published>2015-02-11T06:06:35.000Z</published>
    <updated>2015-02-14T15:26:51.000Z</updated>
    <content type="html"><![CDATA[<p>2014年是很受伤的一年，我就不在这里诉苦了。</p>
<p>说说今年的一些计划，作为一个前端从业者，越来越感受到技术的紧迫性。<br>随着前端在整个行业领域的日益凸显，这个行业的技术无论从深度，广度上都在日益的重度加重当中。<br>作为在这个领域底层摸爬滚打的人，我深深感觉到自己的不足，甚至一度怀疑自己是否真的擅长做这个。<br>我一直以来都不是一个妄自菲薄和狂妄自大的人。走到今天，我已经深知自己是一个有自知之明的人。<br><a id="more"></a><br>虽然痛苦迷茫失落了2014年，但是毕竟自己一踏入职场便选择的这个行业。</p>
<p>今年初步需要掌握的一些技术</p>
<h3 id="javascript">javascript</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Nodejs+express+angularjs+mongodb</div><div class="line"></div><div class="line">glup工具的使用</div><div class="line"></div><div class="line">html5</div><div class="line"><span class="operator">less</span>,stylus</div></pre></td></tr></table></figure>

<p>哎自己智商捉急，从好几年开始气就想往js领域里深入，拖拖拉拉的前行这，现在这个行业趋势愈发让我感觉到这件事情迫在眉睫了。</p>
<p>一定要成功啊，fuck do it.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>2014年是很受伤的一年，我就不在这里诉苦了。</p>
<p>说说今年的一些计划，作为一个前端从业者，越来越感受到技术的紧迫性。<br>随着前端在整个行业领域的日益凸显，这个行业的技术无论从深度，广度上都在日益的重度加重当中。<br>作为在这个领域底层摸爬滚打的人，我深深感觉到自己的不足，甚至一度怀疑自己是否真的擅长做这个。<br>我一直以来都不是一个妄自菲薄和狂妄自大的人。走到今天，我已经深知自己是一个有自知之明的人。<br>]]>
    
    </summary>
    
      <category term="life" scheme="http://elevensky.github.io/tags/life/"/>
    
      <category term="生活" scheme="http://elevensky.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
